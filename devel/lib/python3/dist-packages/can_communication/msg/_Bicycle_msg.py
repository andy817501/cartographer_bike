# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from can_communication/Bicycle_msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Bicycle_msg(genpy.Message):
  _md5sum = "8bec6b5b94fc5c7677fbd09497b317d9"
  _type = "can_communication/Bicycle_msg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 Servo_Direction
float32 Bicycle_voltage
float32 Motor_Roll
float32 Motor_Roll_Gyro
float32 Motor_duty
int32   Motor_rpm
int16   Device_ID"""
  __slots__ = ['Servo_Direction','Bicycle_voltage','Motor_Roll','Motor_Roll_Gyro','Motor_duty','Motor_rpm','Device_ID']
  _slot_types = ['float32','float32','float32','float32','float32','int32','int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Servo_Direction,Bicycle_voltage,Motor_Roll,Motor_Roll_Gyro,Motor_duty,Motor_rpm,Device_ID

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Bicycle_msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.Servo_Direction is None:
        self.Servo_Direction = 0.
      if self.Bicycle_voltage is None:
        self.Bicycle_voltage = 0.
      if self.Motor_Roll is None:
        self.Motor_Roll = 0.
      if self.Motor_Roll_Gyro is None:
        self.Motor_Roll_Gyro = 0.
      if self.Motor_duty is None:
        self.Motor_duty = 0.
      if self.Motor_rpm is None:
        self.Motor_rpm = 0
      if self.Device_ID is None:
        self.Device_ID = 0
    else:
      self.Servo_Direction = 0.
      self.Bicycle_voltage = 0.
      self.Motor_Roll = 0.
      self.Motor_Roll_Gyro = 0.
      self.Motor_duty = 0.
      self.Motor_rpm = 0
      self.Device_ID = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_5fih().pack(_x.Servo_Direction, _x.Bicycle_voltage, _x.Motor_Roll, _x.Motor_Roll_Gyro, _x.Motor_duty, _x.Motor_rpm, _x.Device_ID))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.Servo_Direction, _x.Bicycle_voltage, _x.Motor_Roll, _x.Motor_Roll_Gyro, _x.Motor_duty, _x.Motor_rpm, _x.Device_ID,) = _get_struct_5fih().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_5fih().pack(_x.Servo_Direction, _x.Bicycle_voltage, _x.Motor_Roll, _x.Motor_Roll_Gyro, _x.Motor_duty, _x.Motor_rpm, _x.Device_ID))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 26
      (_x.Servo_Direction, _x.Bicycle_voltage, _x.Motor_Roll, _x.Motor_Roll_Gyro, _x.Motor_duty, _x.Motor_rpm, _x.Device_ID,) = _get_struct_5fih().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_5fih = None
def _get_struct_5fih():
    global _struct_5fih
    if _struct_5fih is None:
        _struct_5fih = struct.Struct("<5fih")
    return _struct_5fih
