// Generated by gencpp from file bicycle/Bicycle_Roll.msg
// DO NOT EDIT!


#ifndef BICYCLE_MESSAGE_BICYCLE_ROLL_H
#define BICYCLE_MESSAGE_BICYCLE_ROLL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace bicycle
{
template <class ContainerAllocator>
struct Bicycle_Roll_
{
  typedef Bicycle_Roll_<ContainerAllocator> Type;

  Bicycle_Roll_()
    : Roll(0.0)
    , Roll_Velocitys(0.0)
    , Set_Torque(0.0)  {
    }
  Bicycle_Roll_(const ContainerAllocator& _alloc)
    : Roll(0.0)
    , Roll_Velocitys(0.0)
    , Set_Torque(0.0)  {
  (void)_alloc;
    }



   typedef float _Roll_type;
  _Roll_type Roll;

   typedef float _Roll_Velocitys_type;
  _Roll_Velocitys_type Roll_Velocitys;

   typedef float _Set_Torque_type;
  _Set_Torque_type Set_Torque;





  typedef boost::shared_ptr< ::bicycle::Bicycle_Roll_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::bicycle::Bicycle_Roll_<ContainerAllocator> const> ConstPtr;

}; // struct Bicycle_Roll_

typedef ::bicycle::Bicycle_Roll_<std::allocator<void> > Bicycle_Roll;

typedef boost::shared_ptr< ::bicycle::Bicycle_Roll > Bicycle_RollPtr;
typedef boost::shared_ptr< ::bicycle::Bicycle_Roll const> Bicycle_RollConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::bicycle::Bicycle_Roll_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::bicycle::Bicycle_Roll_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::bicycle::Bicycle_Roll_<ContainerAllocator1> & lhs, const ::bicycle::Bicycle_Roll_<ContainerAllocator2> & rhs)
{
  return lhs.Roll == rhs.Roll &&
    lhs.Roll_Velocitys == rhs.Roll_Velocitys &&
    lhs.Set_Torque == rhs.Set_Torque;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::bicycle::Bicycle_Roll_<ContainerAllocator1> & lhs, const ::bicycle::Bicycle_Roll_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace bicycle

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::bicycle::Bicycle_Roll_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::bicycle::Bicycle_Roll_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bicycle::Bicycle_Roll_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::bicycle::Bicycle_Roll_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bicycle::Bicycle_Roll_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::bicycle::Bicycle_Roll_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::bicycle::Bicycle_Roll_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7447a4ccbe634941a8adc55e6847e8a3";
  }

  static const char* value(const ::bicycle::Bicycle_Roll_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7447a4ccbe634941ULL;
  static const uint64_t static_value2 = 0xa8adc55e6847e8a3ULL;
};

template<class ContainerAllocator>
struct DataType< ::bicycle::Bicycle_Roll_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bicycle/Bicycle_Roll";
  }

  static const char* value(const ::bicycle::Bicycle_Roll_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::bicycle::Bicycle_Roll_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 Roll\n"
"float32 Roll_Velocitys\n"
"float32 Set_Torque\n"
;
  }

  static const char* value(const ::bicycle::Bicycle_Roll_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::bicycle::Bicycle_Roll_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Roll);
      stream.next(m.Roll_Velocitys);
      stream.next(m.Set_Torque);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Bicycle_Roll_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::bicycle::Bicycle_Roll_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::bicycle::Bicycle_Roll_<ContainerAllocator>& v)
  {
    s << indent << "Roll: ";
    Printer<float>::stream(s, indent + "  ", v.Roll);
    s << indent << "Roll_Velocitys: ";
    Printer<float>::stream(s, indent + "  ", v.Roll_Velocitys);
    s << indent << "Set_Torque: ";
    Printer<float>::stream(s, indent + "  ", v.Set_Torque);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BICYCLE_MESSAGE_BICYCLE_ROLL_H
