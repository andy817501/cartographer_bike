// Generated by gencpp from file can_communication/Odrive_msg.msg
// DO NOT EDIT!


#ifndef CAN_COMMUNICATION_MESSAGE_ODRIVE_MSG_H
#define CAN_COMMUNICATION_MESSAGE_ODRIVE_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace can_communication
{
template <class ContainerAllocator>
struct Odrive_msg_
{
  typedef Odrive_msg_<ContainerAllocator> Type;

  Odrive_msg_()
    : Device_ID(0)
    , Command(0)
    , Motor_rpm(0.0)
    , Motor_pos(0.0)
    , Motor_torque(0.0)
    , Motor_voltage(0.0)
    , Motor_current(0.0)  {
    }
  Odrive_msg_(const ContainerAllocator& _alloc)
    : Device_ID(0)
    , Command(0)
    , Motor_rpm(0.0)
    , Motor_pos(0.0)
    , Motor_torque(0.0)
    , Motor_voltage(0.0)
    , Motor_current(0.0)  {
  (void)_alloc;
    }



   typedef int16_t _Device_ID_type;
  _Device_ID_type Device_ID;

   typedef int16_t _Command_type;
  _Command_type Command;

   typedef float _Motor_rpm_type;
  _Motor_rpm_type Motor_rpm;

   typedef float _Motor_pos_type;
  _Motor_pos_type Motor_pos;

   typedef float _Motor_torque_type;
  _Motor_torque_type Motor_torque;

   typedef float _Motor_voltage_type;
  _Motor_voltage_type Motor_voltage;

   typedef float _Motor_current_type;
  _Motor_current_type Motor_current;





  typedef boost::shared_ptr< ::can_communication::Odrive_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::can_communication::Odrive_msg_<ContainerAllocator> const> ConstPtr;

}; // struct Odrive_msg_

typedef ::can_communication::Odrive_msg_<std::allocator<void> > Odrive_msg;

typedef boost::shared_ptr< ::can_communication::Odrive_msg > Odrive_msgPtr;
typedef boost::shared_ptr< ::can_communication::Odrive_msg const> Odrive_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::can_communication::Odrive_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::can_communication::Odrive_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::can_communication::Odrive_msg_<ContainerAllocator1> & lhs, const ::can_communication::Odrive_msg_<ContainerAllocator2> & rhs)
{
  return lhs.Device_ID == rhs.Device_ID &&
    lhs.Command == rhs.Command &&
    lhs.Motor_rpm == rhs.Motor_rpm &&
    lhs.Motor_pos == rhs.Motor_pos &&
    lhs.Motor_torque == rhs.Motor_torque &&
    lhs.Motor_voltage == rhs.Motor_voltage &&
    lhs.Motor_current == rhs.Motor_current;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::can_communication::Odrive_msg_<ContainerAllocator1> & lhs, const ::can_communication::Odrive_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace can_communication

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::can_communication::Odrive_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::can_communication::Odrive_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_communication::Odrive_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_communication::Odrive_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_communication::Odrive_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_communication::Odrive_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::can_communication::Odrive_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "42d24095fdb231486a76000750ac32b2";
  }

  static const char* value(const ::can_communication::Odrive_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x42d24095fdb23148ULL;
  static const uint64_t static_value2 = 0x6a76000750ac32b2ULL;
};

template<class ContainerAllocator>
struct DataType< ::can_communication::Odrive_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "can_communication/Odrive_msg";
  }

  static const char* value(const ::can_communication::Odrive_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::can_communication::Odrive_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16     Device_ID\n"
"int16     Command\n"
"float32   Motor_rpm\n"
"float32   Motor_pos\n"
"float32   Motor_torque\n"
"float32   Motor_voltage\n"
"float32   Motor_current\n"
;
  }

  static const char* value(const ::can_communication::Odrive_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::can_communication::Odrive_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Device_ID);
      stream.next(m.Command);
      stream.next(m.Motor_rpm);
      stream.next(m.Motor_pos);
      stream.next(m.Motor_torque);
      stream.next(m.Motor_voltage);
      stream.next(m.Motor_current);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Odrive_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::can_communication::Odrive_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::can_communication::Odrive_msg_<ContainerAllocator>& v)
  {
    s << indent << "Device_ID: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Device_ID);
    s << indent << "Command: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Command);
    s << indent << "Motor_rpm: ";
    Printer<float>::stream(s, indent + "  ", v.Motor_rpm);
    s << indent << "Motor_pos: ";
    Printer<float>::stream(s, indent + "  ", v.Motor_pos);
    s << indent << "Motor_torque: ";
    Printer<float>::stream(s, indent + "  ", v.Motor_torque);
    s << indent << "Motor_voltage: ";
    Printer<float>::stream(s, indent + "  ", v.Motor_voltage);
    s << indent << "Motor_current: ";
    Printer<float>::stream(s, indent + "  ", v.Motor_current);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAN_COMMUNICATION_MESSAGE_ODRIVE_MSG_H
