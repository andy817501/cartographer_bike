// Generated by gencpp from file can_communication/VESC_srvRequest.msg
// DO NOT EDIT!


#ifndef CAN_COMMUNICATION_MESSAGE_VESC_SRVREQUEST_H
#define CAN_COMMUNICATION_MESSAGE_VESC_SRVREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace can_communication
{
template <class ContainerAllocator>
struct VESC_srvRequest_
{
  typedef VESC_srvRequest_<ContainerAllocator> Type;

  VESC_srvRequest_()
    : Motor_duty(0.0)
    , Motor_rpm(0)  {
    }
  VESC_srvRequest_(const ContainerAllocator& _alloc)
    : Motor_duty(0.0)
    , Motor_rpm(0)  {
  (void)_alloc;
    }



   typedef float _Motor_duty_type;
  _Motor_duty_type Motor_duty;

   typedef int16_t _Motor_rpm_type;
  _Motor_rpm_type Motor_rpm;





  typedef boost::shared_ptr< ::can_communication::VESC_srvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::can_communication::VESC_srvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct VESC_srvRequest_

typedef ::can_communication::VESC_srvRequest_<std::allocator<void> > VESC_srvRequest;

typedef boost::shared_ptr< ::can_communication::VESC_srvRequest > VESC_srvRequestPtr;
typedef boost::shared_ptr< ::can_communication::VESC_srvRequest const> VESC_srvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::can_communication::VESC_srvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::can_communication::VESC_srvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::can_communication::VESC_srvRequest_<ContainerAllocator1> & lhs, const ::can_communication::VESC_srvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.Motor_duty == rhs.Motor_duty &&
    lhs.Motor_rpm == rhs.Motor_rpm;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::can_communication::VESC_srvRequest_<ContainerAllocator1> & lhs, const ::can_communication::VESC_srvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace can_communication

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::can_communication::VESC_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::can_communication::VESC_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_communication::VESC_srvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::can_communication::VESC_srvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_communication::VESC_srvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::can_communication::VESC_srvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::can_communication::VESC_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "93fd0cd6b16901ae98e434712f08384d";
  }

  static const char* value(const ::can_communication::VESC_srvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x93fd0cd6b16901aeULL;
  static const uint64_t static_value2 = 0x98e434712f08384dULL;
};

template<class ContainerAllocator>
struct DataType< ::can_communication::VESC_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "can_communication/VESC_srvRequest";
  }

  static const char* value(const ::can_communication::VESC_srvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::can_communication::VESC_srvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 Motor_duty\n"
"int16 Motor_rpm\n"
;
  }

  static const char* value(const ::can_communication::VESC_srvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::can_communication::VESC_srvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Motor_duty);
      stream.next(m.Motor_rpm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VESC_srvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::can_communication::VESC_srvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::can_communication::VESC_srvRequest_<ContainerAllocator>& v)
  {
    s << indent << "Motor_duty: ";
    Printer<float>::stream(s, indent + "  ", v.Motor_duty);
    s << indent << "Motor_rpm: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Motor_rpm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CAN_COMMUNICATION_MESSAGE_VESC_SRVREQUEST_H
